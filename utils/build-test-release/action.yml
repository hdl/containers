# Authors:
#   Unai Martinez-Corral
#
# Copyright 2019-2022 Unai Martinez-Corral <unai.martinezcorral@ehu.eus>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: '[HDLC] Build, Test and Release'
description: 'Build, Test and Release HDL Containers'

inputs:
  architecture:
    description: 'Name of the architecture to build images for.'
    required: false
    default: amd64
  collection:
    description: 'Name of the collection to build images for.'
    required: true
  images:
    description: 'List of default names of images to be built and tested.'
    required: true
  pull:
    description: 'List of images from the same collection and architecture to be pulled before the build.'
    required: false
    default: None
  skip-test:
    description: 'Skip testing the built images.'
    required: false
    default: false
  skip-release:
    description: 'Skip pushing and mirroring to container registries.'
    required: false
    default: false
  gcr_token:
    description: 'Google Container Registry access token.'
    required: false
  gh_token:
    description: 'GitHub Container Registry access token.'
    required: false
  docker_user:
    description: 'Docker Container Registry user name.'
    required: false
  docker_pass:
    description: 'Docker Container Registry password.'
    required: false

runs:
  using: 'composite'
  steps:

  - shell: bash
    run: |
      # Setup
      echo '::group::Setup'
      ./utils/setup.sh ${{ inputs.architecture }}
      echo '::endgroup::'

  - shell: python
    run: |
      # [Pull,] Build [and Test]
      from subprocess import check_call
      cargs = ['-a', '${{ inputs.architecture }}', '-c', '${{ inputs.collection }}']
      if "${{ inputs.pull }}".lower() not in ["none","false","no"]:
          check_call(['pyHDLC', 'pull'] + cargs + '${{ inputs.pull }}'.split(' '))
      runtest = [] if "${{ inputs.skip-test }}".lower() in ["true","skip","yes"] else ['-q']
      check_call(['pyHDLC', 'build'] + runtest + cargs + ['-d'] + '${{ inputs.images }}'.split(' '))

  - name: Release
    uses: pyTooling/Actions/with-post-step@r0
    with:
      main: |
        # Release
        # NOTE: the content of the shell if statement is executed if the command returns 0, thus,
        # the logic of the evaluations in Python is negated.
        if python3 -c 'exit("${{ inputs.skip-release }}".lower() not in ["true","skip","yes"])'; then
            echo "Skipping release..."
            exit 0
        fi
        echo '${{ inputs.gcr_token }}' | docker login gcr.io -u _json_key --password-stdin
        echo '${{ inputs.gh_token }}' | docker login ghcr.io -u gha --password-stdin
        echo '${{ inputs.docker_pass }}' | docker login docker.io -u '${{ inputs.docker_user }}' --password-stdin
        dockerRelease ${{ inputs.architecture }} ${{ inputs.collection }} ${{ inputs.images }}
      post: for registry in gcr.io ghcr.io docker.io; do docker logout "$registry"; done

  - shell: bash
    run: |
      for image in ${{ inputs.images }}; do
        id=$(echo "$image" | sed 's#/#--#g' | sed 's/#.*//g')
        date > "$id".status
      done

  - name: 'ðŸ“¤ Upload artifact'
    uses: actions/upload-artifact@v3
    with:
      path: '*.status'
